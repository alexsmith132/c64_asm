ca65 V2.11.0 - (C) Copyright 1998-2005 Ullrich von Bassewitz
Main file   : bcdmultab.s
Current file: bcdmultab.s

000000r 1               ;Schnelle Multiplikation
000000r 1               ;
000000r 1               ;Die Idee stammt von Stephen Judd.
000000r 1               ;Auch in »The Fridge« und im »C=Hacking Magazine« zu finden
000000r 1               ;aber eigentlich eine Errungenschaft der alten Babylonier
000000r 1               ;
000000r 1               ;Wenn man f(x) = x^2 / 4 nimmt, dann
000000r 1               ;
000000r 1               ;ist      a*b = f(a+b) - f(a-b)
000000r 1               ;wegen
000000r 1               ;   (a+b)²/4-(a-b)²/4 =
000000r 1               ;   a²/4+ab/2+b²/4  - a²/4-ab/2+b²/4 =
000000r 1               ;   ab/2+ab/2 = ab   q.e.d.
000000r 1               ;
000000r 1               ;Die Multipliaktionstabellen für Quadrate sind natürlich
000000r 1               ;viel kürzer als die brutalen 256*256*2 Bytes (128k) einer
000000r 1               ;einfachen, geradlinigen Tabelle. Man braucht 2 Tabellen der
000000r 1               ;Quadrate mit 9 Bit Eingangsgröße und 16 Bit Ergebnisgröße
000000r 1               ;Das sind 4*256 Bytes
000000r 1               ;
000000r 1               ;Das Bilden des Zweierkomplements üblicherweise durch
000000r 1               ;
000000r 1               ;   EOR #$ff
000000r 1               ;   CLC
000000r 1               ;   ADC #1
000000r 1               ;
000000r 1               ;läßt sich durch Verschieben von Tabelle 1 um ein Byte
000000r 1               ;runter und das Bilden des einfachen Komplements vereinfachen
000000r 1               ;
000000r 1               ;   EOR #$ff
000000r 1               ;
000000r 1               ;Dieser Algorithmus ist besonders nützlich, wenn man
000000r 1               ;Zahlen mehrfach mit dem selben Faktor multiplizieren
000000r 1               ;möchte. Dann kann man die zp Adresse des Multiplikators
000000r 1               ;nämlich belassen und braucht jeweils nur das Y-Register
000000r 1               ;zu verändern.
000000r 1               ;Mit dem selben Trick läßt sich der Algorithmus auch einfach
000000r 1               ;auf 16 Bit erweitern. Wenn man allerdings schnell sein will,
000000r 1               ;braucht man dann mehr als 8 Zeropage Adressen.
000000r 1               
000000r 1               stack=$100
000000r 1               
000000r 1               zp1=$20    			;8 Bytes ZP Indexzeiger
000000r 1               zp2=$22
000000r 1               zp3=$24
000000r 1               zp4=$26
000000r 1               
000000r 1               tab1=$4000 			;2 kBytes Quadrattabellen
000000r 1               tab2=$4200
000000r 1               tab3=$4400
000000r 1               tab4=$4600
000000r 1               
000000r 1                       ;Argumente Akku+Y-Register als Multiplikator und Multiplikant
000000r 1               	;vor erstem Aufruf Routine "initmultab" aufrufen, um die Tabellen
000000r 1               	;zu berechnen
000000r 1               	;Ergebnis: lo - X-Register  hi - Akku
000000r 1               
000000r 1               .proc bcdtest
000000r 1               	multipliator	=stack+3	;stack+1 u. +2=jsr-Adresse
000000r 1               	multiplikant	=stack+4
000000r 1  A9 rr        		lda #<bcdmultab1lo
000002r 1  85 20        		sta zp1
000004r 1               .endproc
000004r 1               
000004r 1               .proc bcdmultab
000004r 1  85 20        		sta zp1     	;Zeropage Adressen setzen
000006r 1  85 22        		sta zp2
000008r 1  49 FF        		eor #$ff
00000Ar 1  85 24        		sta zp3
00000Cr 1  85 26        		sta zp4
00000Er 1               
00000Er 1  78           		sei
00000Fr 1  F8           		sed
000010r 1  38           		sec
000011r 1  B1 20        		lda (zp1),y
000013r 1  F1 24        		sbc (zp3),y
000015r 1  AA           		tax         	;lo-Prokukt in X-Register
000016r 1  B1 22        		lda (zp2),y
000018r 1  F1 26        		sbc (zp4),y 	;hi-Produkt in Akku
00001Ar 1  D8           		cld
00001Br 1  58           		cli
00001Cr 1               
00001Cr 1  60           		rts
00001Dr 1               .endproc
00001Dr 1               
00001Dr 1               
00001Dr 1                       ;Die Grundidee der verwendeten Quadrattabellen ist:
00001Dr 1                       ;  x²/4 = (x-1)²/4 + x/2 -1 =
00001Dr 1                       ;  x²   = (x-1)² + 2x    -1 =
00001Dr 1                       ;  x²   = x²-2x+1+ 2x    -1 =
00001Dr 1                       ;  x²   = x²+1           -1 =
00001Dr 1                       ;  x²   = x²
00001Dr 1                       ; mit (x-1) läßt sich der vorherige Tabellenwert weiterverwenden
00001Dr 1                       ; wodurch eine einfache Reihe entsteht
00001Dr 1  xx xx xx xx          	.align 256
000021r 1  xx xx xx xx  
000025r 1  xx xx xx xx  
000029r 1  xx xx xx xx  
00002Dr 1  xx xx xx xx  
000031r 1  xx xx xx xx  
000035r 1  xx xx xx xx  
000039r 1  xx xx xx xx  
00003Dr 1  xx xx xx xx  
000041r 1  xx xx xx xx  
000045r 1  xx xx xx xx  
000049r 1  xx xx xx xx  
00004Dr 1  xx xx xx xx  
000051r 1  xx xx xx xx  
000055r 1  xx xx xx xx  
000059r 1  xx xx xx xx  
00005Dr 1  xx xx xx xx  
000061r 1  xx xx xx xx  
000065r 1  xx xx xx xx  
000069r 1  xx xx xx xx  
00006Dr 1  xx xx xx xx  
000071r 1  xx xx xx xx  
000075r 1  xx xx xx xx  
000079r 1  xx xx xx xx  
00007Dr 1  xx xx xx xx  
000081r 1  xx xx xx xx  
000085r 1  xx xx xx xx  
000089r 1  xx xx xx xx  
00008Dr 1  xx xx xx xx  
000091r 1  xx xx xx xx  
000095r 1  xx xx xx xx  
000099r 1  xx xx xx xx  
00009Dr 1  xx xx xx xx  
0000A1r 1  xx xx xx xx  
0000A5r 1  xx xx xx xx  
0000A9r 1  xx xx xx xx  
0000ADr 1  xx xx xx xx  
0000B1r 1  xx xx xx xx  
0000B5r 1  xx xx xx xx  
0000B9r 1  xx xx xx xx  
0000BDr 1  xx xx xx xx  
0000C1r 1  xx xx xx xx  
0000C5r 1  xx xx xx xx  
0000C9r 1  xx xx xx xx  
0000CDr 1  xx xx xx xx  
0000D1r 1  xx xx xx xx  
0000D5r 1  xx xx xx xx  
0000D9r 1  xx xx xx xx  
0000DDr 1  xx xx xx xx  
0000E1r 1  xx xx xx xx  
0000E5r 1  xx xx xx xx  
0000E9r 1  xx xx xx xx  
0000EDr 1  xx xx xx xx  
0000F1r 1  xx xx xx xx  
0000F5r 1  xx xx xx xx  
0000F9r 1  xx xx xx xx  
0000FDr 1  xx xx xx     
000100r 1  00 00 01 02  bcdmultab1lo: 	.repeat 26, ZEHN
000104r 1  04 06 09 12  
000108r 1  16 20 25 30  
00010Cr 1  36 42 49 56  
000110r 1  00 01 02 04  
000114r 1  06 09 12 16  
000118r 1  20 25 30 36  
00011Cr 1  42 49 56 64  
000120r 1  01 02 04 06  
000124r 1  09 12 16 20  
000128r 1  25 30 36 42  
00012Cr 1  49 56 64 72  
000130r 1  02 04 06 09  
000134r 1  12 16 20 25  
000138r 1  30 36 42 49  
00013Cr 1  56 64 72 81  
000140r 1  04 06 09 12  
000144r 1  16 20 25 30  
000148r 1  36 42 49 56  
00014Cr 1  64 72 81 90  
000150r 1  06 09 12 16  
000154r 1  20 25 30 36  
000158r 1  42 49 56 64  
00015Cr 1  72 81 90 00  
000160r 1  09 12 16 20  
000164r 1  25 30 36 42  
000168r 1  49 56 64 72  
00016Cr 1  81 90 00 10  
000170r 1  12 16 20 25  
000174r 1  30 36 42 49  
000178r 1  56 64 72 81  
00017Cr 1  90 00 10 21  
000180r 1  16 20 25 30  
000184r 1  36 42 49 56  
000188r 1  64 72 81 90  
00018Cr 1  00 10 21 32  
000190r 1  20 25 30 36  
000194r 1  42 49 56 64  
000198r 1  72 81 90 00  
00019Cr 1  10 21 32 44  
0001A0r 1  25 30 36 42  
0001A4r 1  49 56 64 72  
0001A8r 1  81 90 00 10  
0001ACr 1  21 32 44 56  
0001B0r 1  30 36 42 49  
0001B4r 1  56 64 72 81  
0001B8r 1  90 00 10 21  
0001BCr 1  32 44 56 69  
0001C0r 1  36 42 49 56  
0001C4r 1  64 72 81 90  
0001C8r 1  00 10 21 32  
0001CCr 1  44 56 69 82  
0001D0r 1  42 49 56 64  
0001D4r 1  72 81 90 00  
0001D8r 1  10 21 32 44  
0001DCr 1  56 69 82 96  
0001E0r 1  49 56 64 72  
0001E4r 1  81 90 00 10  
0001E8r 1  21 32 44 56  
0001ECr 1  69 82 96 10  
0001F0r 1  56 64 72 81  
0001F4r 1  90 00 10 21  
0001F8r 1  32 44 56 69  
0001FCr 1  82 96 10 25  
000200r 1  64 72 81 90  
000204r 1  00 10 21 32  
000208r 1  44 56 69 82  
00020Cr 1  96 10 25 40  
000210r 1  72 81 90 00  
000214r 1  10 21 32 44  
000218r 1  56 69 82 96  
00021Cr 1  10 25 40 56  
000220r 1  81 90 00 10  
000224r 1  21 32 44 56  
000228r 1  69 82 96 10  
00022Cr 1  25 40 56 72  
000230r 1  90 00 10 21  
000234r 1  32 44 56 69  
000238r 1  82 96 10 25  
00023Cr 1  40 56 72 89  
000240r 1  00 10 21 32  
000244r 1  44 56 69 82  
000248r 1  96 10 25 40  
00024Cr 1  56 72 89 06  
000250r 1  10 21 32 44  
000254r 1  56 69 82 96  
000258r 1  10 25 40 56  
00025Cr 1  72 89 06 24  
000260r 1  21 32 44 56  
000264r 1  69 82 96 10  
000268r 1  25 40 56 72  
00026Cr 1  89 06 24 42  
000270r 1  32 44 56 69  
000274r 1  82 96 10 25  
000278r 1  40 56 72 89  
00027Cr 1  06 24 42 61  
000280r 1  44 56 69 82  
000284r 1  96 10 25 40  
000288r 1  56 72 89 06  
00028Cr 1  24 42 61 80  
000290r 1  56 69 82 96  
000294r 1  10 25 40 56  
000298r 1  72 89 06 24  
00029Cr 1  42 61 80 00  
0002A0r 1               		.repeat 16, EIN
0002A0r 1               		 .byte (((ZEHN+EIN)*(ZEHN+EIN)/4 .mod 100)/10)*16+((ZEHN+EIN)*(ZEHN+EIN)/4) .mod 10
0002A0r 1               		.endrep
0002A0r 1               		.endrep
0002A0r 1  00 00 00 00  bcdmultab1hi: 	.repeat 26, ZEHN
0002A4r 1  00 00 00 00  
0002A8r 1  00 00 00 00  
0002ACr 1  00 00 00 00  
0002B0r 1  00 00 00 00  
0002B4r 1  00 00 00 00  
0002B8r 1  00 00 00 00  
0002BCr 1  00 00 00 00  
0002C0r 1  00 00 00 00  
0002C4r 1  00 00 00 00  
0002C8r 1  00 00 00 00  
0002CCr 1  00 00 00 00  
0002D0r 1  00 00 00 00  
0002D4r 1  00 00 00 00  
0002D8r 1  00 00 00 00  
0002DCr 1  00 00 00 00  
0002E0r 1  00 00 00 00  
0002E4r 1  00 00 00 00  
0002E8r 1  00 00 00 00  
0002ECr 1  00 00 00 00  
0002F0r 1  00 00 00 00  
0002F4r 1  00 00 00 00  
0002F8r 1  00 00 00 00  
0002FCr 1  00 00 00 01  
000300r 1  00 00 00 00  
000304r 1  00 00 00 00  
000308r 1  00 00 00 00  
00030Cr 1  00 00 01 01  
000310r 1  00 00 00 00  
000314r 1  00 00 00 00  
000318r 1  00 00 00 00  
00031Cr 1  00 01 01 01  
000320r 1  00 00 00 00  
000324r 1  00 00 00 00  
000328r 1  00 00 00 00  
00032Cr 1  01 01 01 01  
000330r 1  00 00 00 00  
000334r 1  00 00 00 00  
000338r 1  00 00 00 01  
00033Cr 1  01 01 01 01  
000340r 1  00 00 00 00  
000344r 1  00 00 00 00  
000348r 1  00 00 01 01  
00034Cr 1  01 01 01 01  
000350r 1  00 00 00 00  
000354r 1  00 00 00 00  
000358r 1  00 01 01 01  
00035Cr 1  01 01 01 01  
000360r 1  00 00 00 00  
000364r 1  00 00 00 00  
000368r 1  01 01 01 01  
00036Cr 1  01 01 01 01  
000370r 1  00 00 00 00  
000374r 1  00 00 00 01  
000378r 1  01 01 01 01  
00037Cr 1  01 01 01 01  
000380r 1  00 00 00 00  
000384r 1  00 00 01 01  
000388r 1  01 01 01 01  
00038Cr 1  01 01 01 02  
000390r 1  00 00 00 00  
000394r 1  00 01 01 01  
000398r 1  01 01 01 01  
00039Cr 1  01 01 02 02  
0003A0r 1  00 00 00 00  
0003A4r 1  01 01 01 01  
0003A8r 1  01 01 01 01  
0003ACr 1  01 02 02 02  
0003B0r 1  00 00 00 01  
0003B4r 1  01 01 01 01  
0003B8r 1  01 01 01 01  
0003BCr 1  02 02 02 02  
0003C0r 1  00 00 01 01  
0003C4r 1  01 01 01 01  
0003C8r 1  01 01 01 02  
0003CCr 1  02 02 02 02  
0003D0r 1  00 01 01 01  
0003D4r 1  01 01 01 01  
0003D8r 1  01 01 02 02  
0003DCr 1  02 02 02 02  
0003E0r 1  01 01 01 01  
0003E4r 1  01 01 01 01  
0003E8r 1  01 02 02 02  
0003ECr 1  02 02 02 03  
0003F0r 1  01 01 01 01  
0003F4r 1  01 01 01 01  
0003F8r 1  02 02 02 02  
0003FCr 1  02 02 03 03  
000400r 1  01 01 01 01  
000404r 1  01 01 01 02  
000408r 1  02 02 02 02  
00040Cr 1  02 03 03 03  
000410r 1  01 01 01 01  
000414r 1  01 01 02 02  
000418r 1  02 02 02 02  
00041Cr 1  03 03 03 03  
000420r 1  01 01 01 01  
000424r 1  01 02 02 02  
000428r 1  02 02 02 03  
00042Cr 1  03 03 03 03  
000430r 1  01 01 01 01  
000434r 1  02 02 02 02  
000438r 1  02 02 03 03  
00043Cr 1  03 03 03 04  
000440r 1               		.repeat 16, EIN
000440r 1               		 .byte (((ZEHN+EIN)*(ZEHN+EIN)/400)/10)*16+((ZEHN+EIN)*(ZEHN+EIN)/400) .mod 10
000440r 1               		.endrep
000440r 1               		.endrep
000440r 1               ;bcdmultab1hi: 	.repeat 253, I
000440r 1               		;.if I*I<=9999*4
000440r 1               ;		  .byte (((I*I)/400)/10)*16+((I*I)/400) .mod 10
000440r 1               		;.else
000440r 1               		;  .byte $ff
000440r 1               		;.endif
000440r 1               ;		.endrep
000440r 1               
